---
- name: install python-software-properties
  apt: pkg=python-software-properties state=present force=yes cache_valid_time=3600
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: install node key file
  apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

#- name: add node repository into sources list.
#  apt_repository: repo='deb https://deb.nodesource.com/node_0.12 xenial main' state=present

- raw: curl -sL https://deb.nodesource.com/setup_5.x | bash -

- name: update cache
  apt: update_cache=yes force=yes cache_valid_time=3600
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: install pre-requisites
  apt: pkg={{ item }} state=present force=yes cache_valid_time=3600
  with_items:
    - docker.io
    - golang
    - python-pip
    - xvfb
    - firefox=45.0.2+build1-0ubuntu1
    - git
    - curl
    - nodejs
    - ruby
    - ruby-dev
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Create symlink to nodejs
  file: src=/usr/bin/nodejs dest=/usr/bin/node state=link

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present
  when: jenkins_version is undefined
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: yes
  when: jenkins_version is undefined

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    dest: "/tmp/jenkins.deb"
  when: jenkins_version is defined

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins.deb"
  register: specific_version

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins.deb"
    state: installed
  when: specific_version.stat.exists

- name: Install Jenkins from repository.
  apt:
    name: jenkins
    state: installed
  when: jenkins_version is undefined
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2


- name: Configure npm registry for current install user if proxy set
  shell: npm config set registry {{ nodejs_npm_registry }}
  when: with_proxy

- name: Configure npm registry for Jenkins user if proxy set
  shell: npm config set registry {{ nodejs_npm_registry }}
  become: true
  become_user: jenkins
  when: with_proxy

- become: true
  become_user: root
  npm: name={{ item }} global=yes
  with_items:
    - grunt-cli
    - bower
    - typescript
    - typings@1.5.0
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

#gem plugin does'nt work correct
- raw: sudo gem install compass

- name: install Jenkins proxy config if necessary
  become: true
  become_user: jenkins
  copy: src=proxy.xml dest=/var/lib/jenkins/proxy.xml owner=jenkins
  when: with_proxy
  notify: restart jenkins
- name: Tune Jenkins proxy per global variable
  become: true
  become_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/proxy.xml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "<proxy>"
    content: |
      <name>{{ http_proxy_host }}</name>
      <port>{{ http_proxy_port }}</port>
  when: with_proxy

- name: create .gradle directory
  file: path=/var/lib/jenkins/.gradle state=directory owner=jenkins

- name: install gradle.properties with proxy if necessary
  become: true
  become_user: jenkins
  copy: src=gradle.properties dest=/var/lib/jenkins/.gradle/gradle.properties owner=jenkins
  when: with_proxy
- name: Tune gradle proxy per global variable
  become: true
  become_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/.gradle/gradle.properties
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    content: |
      systemProp.http.proxyHost={{ http_proxy_host }}
      systemProp.http.proxyPort={{ http_proxy_port }}
      systemProp.https.proxyHost={{ http_proxy_host }}
      systemProp.https.proxyPort={{ http_proxy_port }}
  when: with_proxy

- raw: sudo service jenkins restart

# wait 300 seconds for port 8080 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "/var/lib/jenkins/init.groovy.d/basic-security.groovy"
    state: absent

- name: create init groovy directory
  become: true
  become_user: jenkins
  file: path="/var/lib/jenkins/init.groovy.d/" state=directory

- name: provision Jenkins admin and anonymous users
  become: true
  become_user: jenkins
  copy: src=basic-security.groovy dest=/var/lib/jenkins/init.groovy.d/basic-security owner=jenkins
  notify: restart jenkins

- name: install config.xml
  become: true
  become_user: jenkins
  copy: src={{ item }} dest=/var/lib/jenkins/{{ item }} owner=jenkins
  with_items:
    - config.xml
    - jenkins.mvn.GlobalMavenConfig.xml
    - hudson.tasks.Maven.xml
    - org.jenkinsci.plugins.xvfb.Xvfb.xml
    - org.jenkins.ci.plugins.xframe_filter.XFrameFilterPageDecorator.xml
  notify: restart jenkins

- name: Tune GIT repository and branch per global variable
  become: true
  become_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/config.xml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK JENKINS VAR -->"
    insertbefore: "</tree-map>"
    block: |
      <int>3</int>
      <string>GIT_REPOSITORY</string>
      <string>{{ github_url }}</string>
      <string>BRANCH_TO_BUILD</string>
      <string>{{ github_branch }}</string>
      <string>PROD_SERVERS</string>
      <string>{{ prod_servers }}</string>

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: download jenkins update-center.js
  become: true
  become_user: jenkins
  get_url:
    url: http://updates.jenkins-ci.org/update-center.json
    dest: /tmp/update-center.json
    owner: jenkins

- name: remove first and last line javascript wrapper
  become: true
  become_user: jenkins
  raw:  sed -i '1d;$d' /tmp/update-center.json

- name: push it to the update URL
  become: true
  become_user: jenkins
  raw:
     'curl -X POST -H "Accept: application/json"
     -d @/tmp/update-center.json http://localhost:8080/updateCenter/byId/default/postBack'

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: download jenkins cli
  become: true
  become_user: jenkins
  get_url: url=http://localhost:8080/jnlpJars/jenkins-cli.jar dest=/tmp/jenkins-cli.jar owner=jenkins

- name: download jenkins plugins
  become: true
  become_user: jenkins
  get_url:
    dest: /var/lib/jenkins/plugins/
    url: http://mirrors.jenkins-ci.org/plugins/{{ item }}
  with_items:
    - ace-editor/1.1/ace-editor.hpi
    - ant/1.2/ant.hpi
    - antisamy-markup-formatter/1.1/antisamy-markup-formatter.hpi
    - branch-api/2.0.8/branch-api.hpi
    - build-flow-plugin/0.20/build-flow-plugin.hpi
    - buildgraph-view/1.5.2/buildgraph-view.hpi
    - build-pipeline-plugin/1.5.6/build-pipeline-plugin.hpi
    - chucknorris/1.0/chucknorris.hpi
    - cloudbees-folder/6.0.3/cloudbees-folder.hpi
    - conditional-buildstep/1.3.5/conditional-buildstep.hpi
    - copyartifact/1.38.1/copyartifact.hpi
    - credentials/2.1.13/credentials.hpi
    - cvs/2.11/cvs.hpi
    - delivery-pipeline-plugin/1.0.0/delivery-pipeline-plugin.hpi
    - display-url-api/0.5/display-url-api.hpi
    - durable-task/1.13/durable-task.hpi
    - external-monitor-job/1.4/external-monitor-job.hpi
    - git/3.2.0/git.hpi
    - git-client/2.4.1/git-client.hpi
    - git-server/1.7/git-server.hpi
    - greenballs/1.15/greenballs.hpi
    - handlebars/1.1.1/handlebars.hpi
    - htmlpublisher/1.13/htmlpublisher.hpi
    - jacoco/2.2.0/jacoco.hpi
    - javadoc/1.1/javadoc.hpi
    - jquery/1.11.2-0/jquery.hpi
    - jquery-detached/1.2.1/jquery-detached.hpi
    - junit/1.19/junit.hpi
    - ldap/1.11/ldap.hpi
    - mailer/1.18/mailer.hpi
    - mapdb-api/1.0.9.0/mapdb-api.hpi
    - matrix-auth/1.1/matrix-auth.hpi
    - matrix-project/1.7.1/matrix-project.hpi
    - maven-plugin/2.7.1/maven-plugin.hpi
    - momentjs/1.1.1/momentjs.hpi
    - pam-auth/1.1/pam-auth.hpi
    - parameterized-trigger/2.32/parameterized-trigger.hpi
    - performance/2.0/performance.hpi
    - pipeline-build-step/2.5/pipeline-build-step.hpi
    - pipeline-graph-analysis/1.3/pipeline-graph-analysis.hpi
    - pipeline-input-step/2.5/pipeline-input-step.hpi
    - pipeline-milestone-step/1.3.1/pipeline-milestone-step.hpi
    - pipeline-rest-api/2.6/pipeline-rest-api.hpi
    - pipeline-stage-step/2.2/pipeline-stage-step.hpi
    - pipeline-stage-view/2.6/pipeline-stage-view.hpi
    - promoted-builds/2.27/promoted-builds.hpi
    - resource-disposer/0.3/resource-disposer.hpi
    - run-condition/1.0/run-condition.hpi
    - scm-api/2.1.1/scm-api.hpi
    - script-security/1.27/script-security.hpi
    - sonar/2.4.4/sonar.hpi
    - ssh-credentials/1.12/ssh-credentials.hpi
    - ssh-slaves/1.9/ssh-slaves.hpi
    - structs/1.6/structs.hpi
    - subversion/2.7.1/subversion.hpi
    - token-macro/2.0/token-macro.hpi
    - translation/1.10/translation.hpi
    - windows-slaves/1.0/windows-slaves.hpi
    - workflow-aggregator/2.4/workflow-aggregator.hpi
    - workflow-api/2.13/workflow-api.hpi
    - workflow-basic-steps/2.3/workflow-basic-steps.hpi
    - workflow-cps/2.29/workflow-cps.hpi
    - workflow-cps-global-lib/2.7/workflow-cps-global-lib.hpi
    - workflow-durable-task-step/2.10/workflow-durable-task-step.hpi
    - workflow-job/2.10/workflow-job.hpi
    - workflow-multibranch/2.14/workflow-multibranch.hpi
    - workflow-scm-step/2.4/workflow-scm-step.hpi
    - workflow-step-api/2.9/workflow-step-api.hpi
    - workflow-support/2.14/workflow-support.hpi
    - ws-cleanup/0.32/ws-cleanup.hpi
    - xframe-filter-plugin/1.2/xframe-filter-plugin.hpi
    - xvfb/1.1.3/xvfb.hpi
  notify: restart jenkins




# - name: install jenkins plugins
#   become: true
#   become_user: jenkins
#   # optional parameters
#    -Dhttp.proxyHost={{ http_proxy_host }}
#    -Dhttp.proxyPort={{ http_proxy_port }}
#    -Dhttp.nonProxyHosts="localhost"
#   raw:  java  -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ install-plugin {{ item }}
#   with_items:
#       - http://mirrors.jenkins-ci.org/plugins/git/3.2.0/git.hpi
#       - http://mirrors.jenkins-ci.org/plugins/git-client/2.4.1/git-client.hpi
#       - http://mirrors.jenkins-ci.org/plugins/chucknorris/1.0/chucknorris.hpi
#       - http://mirrors.jenkins-ci.org/plugins/greenballs/1.15/greenballs.hpi
#       - http://mirrors.jenkins-ci.org/plugins/build-pipeline-plugin/1.5.6/build-pipeline-plugin.hpi
#       - http://mirrors.jenkins-ci.org/plugins/delivery-pipeline-plugin/1.0.0/delivery-pipeline-plugin.hpi
#       - http://mirrors.jenkins-ci.org/plugins/copyartifact/1.38.1/copyartifact.hpi
#       - http://mirrors.jenkins-ci.org/plugins/performance/2.1/performance.hpi
#       - http://mirrors.jenkins-ci.org/plugins/jacoco/2.2.0/jacoco.hpi
#       - http://mirrors.jenkins-ci.org/plugins/sonar/2.4.4/sonar.hpi
#       - http://mirrors.jenkins-ci.org/plugins/buildgraph-view/1.5.2/buildgraph-view.hpi
#       - http://mirrors.jenkins-ci.org/plugins/xvfb/1.1.3/xvfb.hpi
#       - http://mirrors.jenkins-ci.org/plugins/ws-cleanup/0.32/ws-cleanup.hpi
#       - http://mirrors.jenkins-ci.org/plugins/xframe-filter-plugin/1.2/xframe-filter-plugin.hpi
#       - http://mirrors.jenkins-ci.org/plugins/htmlpublisher/1.13/htmlpublisher.hpi
#   notify: restart jenkins
#   ignore_errors: True

- name: restart jenkins
  become: true
  become_user: jenkins
  raw:  java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ restart

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- file: dest=/var/lib/jenkins/repo-cache/appstash mode=0755 owner=jenkins group=jenkins state=directory

- name: get GIT repository
  become: true
  become_user: jenkins
  git:
    repo: "{{ github_url }}"
    dest: /var/lib/jenkins/repo-cache/appstash
    bare: yes
    version: master

- name: Setup cron job to update GIT repository automatically
  become: true
  become_user: jenkins
  cron:
    name: "Update AppStash Git Repository"
    minute: "*/60"
    job: "cd /var/lib/jenkins/repo-cache/appstash; git fetch origin +refs/heads/*:refs/heads/* --prune"


- name: install jenkins jobs
  become: true
  become_user: jenkins
  raw: 'sh /provision/roles/jenkins/files/restoreAllJobs.sh'
  ignore_errors: yes

- file: path=/var/lib/jenkins/.ssh/ mode=0755 owner=jenkins group=jenkins state=directory
- file: path=/var/lib/jenkins/.ssh/known_hosts mode=0755 owner=jenkins group=jenkins state=touch
- copy: src=id_rsa.pub dest=/var/lib/jenkins/.ssh/id_rsa.pub mode=0600 group=jenkins owner=jenkins
- copy: src=id_rsa dest=/var/lib/jenkins/.ssh/id_rsa mode=0600 group=jenkins owner=jenkins

- name: start jenkins deployment pipeline
  become: true
  become_user: jenkins
  command: 'java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ build {{ item }}'
  with_items:
    - shop-monolitic-build
    - shop-monolitic-build
    - shop-microservice-product-service-build
    - shop-microservice-cart-service-build
    - shop-microservice-navigation-service-build
    - shop-microservice-recommendation-service-build
    - shop-microservice-product-service-build
    - shop-microservice-dataloader-build
    - shop-microservice-catalog-ui-build
    - shop-microservice-checkout-ui-build
    - shop-microservice-registration-ui-build
  ignore_errors: yes

- name: add jenkins to docker group
  raw: gpasswd -a jenkins docker
  become: true
