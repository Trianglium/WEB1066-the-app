apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'pkg-debian'

jar.baseName = "product-microservice"

idea {
    module {
        name='product-microservice'
    }
}

sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_7
targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_7

mainClassName = "io.github.zutherb.appstash.shop.service.product.Boot"

applicationDefaultJvmArgs = [
//        "-javaagent:../lib/aspectjweaver-1.7.4.jar"
]
 
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spray.io/'
    }
    maven {
        url 'http://repo.typesafe.com/typesafe/releases/'
    }
}

dependencies {
    //please extract version numbers and don't forget main gradle
    compile "org.scala-lang:scala-library:$scalaVersion"
    compile "com.typesafe.akka:akka-actor_2.10:$akkaVersion"
    compile "io.spray:spray-can:$sprayVersion"
    compile "io.spray:spray-routing:$sprayVersion"
    compile "io.spray:spray-caching:$sprayVersion"
    compile "io.spray:spray-json_2.10:1.3.0"
    compile "org.scalaz:scalaz-core_2.10:7.0.6"
    compile "com.typesafe:config:1.0.2"
    compile "org.reactivemongo:reactivemongo_2.10:0.10.0"
//    compile "io.kamon:kamon-core_2.10:0.3.2"
    testCompile "com.typesafe.akka:akka-testkit_2.10:$akkaVersion"
    testCompile "org.specs2:specs2_2.10:2.3.12"
    testCompile "io.spray:spray-testkit:$sprayVersion"

}
 
task stage(dependsOn: ['clean', 'installApp'])

def debName = "product"
debian {
    packagename = "product-service"
    publications = ['mavenStuff']
    controlDirectory = "${projectDir}/debian/control"
    changelogFile = "${projectDir}/debian/changelog"
    outputFile = "${buildDir}/debian/${debName}_${version}.deb"

    data {
        dir {
            name = "${projectDir}/debian/data"
            exclusions = ["**/.DS_Store", "changelog"]
        }
        dir {
            name = "${buildDir}/debian-data/"
            exclusions = ["**/.DS_Store"]
        }
    }
}

task prepareDeb {
    dependsOn installApp

    copy {
        from "${buildDir}/install/"
        into "${buildDir}/debian-data/usr/share/shop/"
    }
}

jar {
    def manifestClasspath = configurations.compile.collect { it.getName() }.join(',')
    def cmd = "git rev-parse HEAD"
    def proc = cmd.execute()
    manifest {
        attributes("Manifest-Version"       : "1.0",
                "Created-By"             : vendor,
                "Specification-Title"    : appName,
                "Specification-Version"  : version,
                "Specification-Vendor"   : vendor,
                "Implementation-Title"   : appName,
                "Implementation-Version" : version,
                "Implementation-Vendor"  : vendor,
                "Git-Revision"           : proc.text.trim(),
                "Build"                  : "${System.getenv("JOB_NAME")}",
                "Build-Number"           : "${System.getenv("BUILD_NUMBER")}",
                "Class-Path"             : manifestClasspath)
    }
}

docker {
    maintainer = 'Bernd Zuther <bernd.zuther@codecentric.de>'
    baseImage = 'relateiq/oracle-java8'
}

distDocker {
    dependsOn build

    applicationName = 'product-service'
    tagVersion = "latest"
    tag = "zutherb/${applicationName}"

    exposePort(18080)
}